---
title: "Exploratory Data Analysis - ST558 FINAL PROJECT"
author: "Kyra Kapsaskis"
format: html
editor: visual
---

## Introduction to the Data

For this project, we will be looking at diabetes data that includes various risk factors and health-related variables that we can assess for their influence on whether or not a person has diabetes.

The purpose of our EDA is to find the best predictors for whether or not someone has diabetes. We want to fit the models because this is the best way to test different predictors but also different relationships to the response variable. A variety of models can be compared and assessed on different metrics to find the strongest relationships.

```{r}
# load in the necessary packages

library(caret)
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(Hmisc)
library(randomForest)
```

#### Read in the Diabetes data from the Diabetes Health Indicators Dataset

Reading about the data at https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset/ we can get some info on the variables.

Our response variable will be the Diabetes_binary variable.

```{r}
# check what directory we are using
getwd()
```

```{r}
# set the directory
setwd("/Users/kyrakapsaskis/ST558_Final_Project_Folder/ST558-Final-Project")
# this would be followed by read.csv with the file name instead of path
```

```{r}
# read in the data using a relative path

diabetes_data <- read.csv("/Users/kyrakapsaskis/ST558_Final_Project_Folder/ST558-Final-Project/diabetes_binary_health_indicators_BRFSS2015.csv")

```

Let's preview the data to make sure it's been read in properly

```{r}
diabetes_data

```

## The data looks good! Now let's move forward!

## What types of data do we have? What do we want?

#### Numeric variables

The numeric variables are BMI, physical health, and mental health, and these can be kept the same for the models that we will create.

#### Categorical variables

The categorical variables are age, general health, education, income, sex (binary, but not a yes/no binary), but they are being represented by numbers, so we must convert them to factors with labels so they are more interpretable. In order to know how to relabel them, we must look them up in the [CODEBOOK](https://www.cdc.gov/brfss/annual_data/2015/pdf/codebook15_llcp.pdf) and read about how they're coded.

-   Age is `_AGEG5YR` in the codebook

-   General Health is `GENHLTH` in the codebook

-   Education is `EDUCA` in the codebook

-   Income is `INCOME2` in the codebook

-   Sex is `SEX` in the codebook

-   The codebook can be found [here](https://www.cdc.gov/brfss/annual_data/2015/pdf/codebook15_llcp.pdf).

### Binary variables - all the rest

These are also categorical variables but they all follow the No/Yes pattern with 0's and 1's so it will be easier to change them all to factors.

```{r}
describe(diabetes_data$GenHlth)
```

```{r}
# convert the variables to factors with meaningful level names
# 0 is female, 1 is male

factor_data <- diabetes_data %>%
  mutate( 
    Diabetes_factor = factor(Diabetes_binary, levels = c(0, 1), labels = c("No", "Yes")),
    HighBP_factor = factor(HighBP, levels = c(0, 1), labels = c("No", "Yes")),
    HighChol_factor = factor(HighChol, levels = c(0, 1), labels = c("No", "Yes")),
    CholCheck_factor = factor(CholCheck, levels = c(0, 1), labels = c("No", "Yes")),
    Smoker_factor = factor(Smoker, levels = c(0, 1), labels = c("No", "Yes")),
    Stroke_factor = factor(Stroke, levels = c(0, 1), labels = c("No", "Yes")),
    HeartDiseaseorAttack_factor = factor(HeartDiseaseorAttack, levels = c(0, 1), labels = c("No", "Yes")),
    PhysActivity_factor = factor(PhysActivity, levels = c(0, 1), labels = c("No", "Yes")),
    Fruits_factor = factor(Fruits, levels = c(0, 1), labels = c("No", "Yes")),
    Veggies_factor = factor(Veggies, levels = c(0, 1), labels = c("No", "Yes")),
    HvyAlcoholConsump_factor = factor(HvyAlcoholConsump, levels = c(0, 1), labels = c("No", "Yes")),
    AnyHealthcare_factor = factor(AnyHealthcare, levels = c(0, 1), labels = c("No", "Yes")),
    NoDocbcCost_factor = factor(NoDocbcCost, levels = c(0, 1), labels = c("No", "Yes")),
    GenHlth_factor = factor(GenHlth, levels = c(1:5), labels = c("Excellent", "Very good", "Good", "Fair", "Poor")),
    Diffwalk_factor = factor(DiffWalk, levels = c(0, 1), labels = c("No", "Yes")),
    Sex_factor = factor(Sex, levels = c(0, 1), labels = c("Female", "Male")),
    # non-binary
    Age_factor = factor(Age, levels = c(1:13), labels = c("18-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80 or older")),
    Education_factor = factor(Education, levels = c(1:6), labels = c("No school", "Elementary", "Some high school", "High school graduate", "Some college or technical school", "College graduate")),
    Income_factor = factor(Income, levels = c(1:8), labels = c("<$10k", "$10k-$15k", "$15k-$20k", "$20k-$25k", "$25k-$35k", "$35k-$50k", "$50k-$75k", "$75k<="))
  )


```

We need to check for missing data so that if there is missing data, we can give R instructions for how to handle it as we are fitting our models and running analyses.

```{r}
# checking for missing data. Other methods are to use str(data), summary(data), or describe(data).

sum(is.na(factor_data))

```

#### Hooray, no missing data!!

```{r}
twoway_table1_Sex <- table(factor_data[, c("Diabetes_factor", "Sex_factor")])
twoway_table2_Age <- table(factor_data[, c("Diabetes_factor", "Age_factor")])
twoway_table3_HighChol <- table(factor_data[, c("Diabetes_factor", "HighChol_factor")])
twoway_table4_PhysActivity <- table(factor_data[, c("Diabetes_factor", "PhysActivity_factor")])
twoway_table5_GenHlth <- table(factor_data[, c("Diabetes_factor", "GenHlth_factor")])
```

```{r}
twoway_table1_Sex
twoway_table2_Age
twoway_table3_HighChol
twoway_table4_PhysActivity
twoway_table5_GenHlth
```

```{r}
physhlth_plot <- ggplot(factor_data, aes(x = PhysHlth)) +
  geom_histogram(binwidth = 2, fill = "light blue", color = "black") +
  labs(title = "Distribution of 'Not Good' Physical Health Days", x = "Now thinking about your physical health,\n which includes physical illness and injury, for how many days during \n the past 30 days was your physical health not good?", y = "Frequency")
physhlth_plot
```

```{r}
menthlth_plot <- ggplot(factor_data, aes(x = MentHlth)) +
  geom_histogram(binwidth = 2, fill = "light blue", color = "black") +
  labs(title = "Distribution of 'Not Good' Mental Health Days", x = "Now thinking about your mental health, \n which includes stress, depression, and problems with emotions, \n for how many days during the past 30 days \n was your mental health not good?", y = "Frequency")
menthlth_plot
```

```{r}
bmi_plot <- ggplot(factor_data, aes(x = BMI)) +
  geom_histogram(binwidth = 2, fill = "light blue", color = "black") +
  labs(title = "Distribution of BMI", x = "BMI", y = "Frequency")
bmi_plot
```

```{r}
#some plotting ideas

# hist() #for a single variable
# ggplot()
# plot() #for multiple variables
# summary() #for binary variables
# table() #for binary variables

# use stacked method or grouping of bars to show an additional variable that is binary with a different color or fill
# binary - contingency table
# categorical - use the multi-categorical and plot for each, univariate, histogram for age, general health, education, income.
# use the diabetes binary variable to show that in a grouped plot - how does the response interact with the variables
# numeric - use a univariate graph - a dot plot, bar plot
```

```{r}

# GET RID OF THIS ONE???
# my_graph <- ggplot(factor_data |> 
#                      drop_na(BMI, Diabetes_factor),
#                    aes(x = Diabetes_factor, y = BMI, fill = Diabetes_factor)) 
# 
# my_graph + 
#   geom_boxplot() +  
#   geom_jitter(width = 0.2, alpha = 0.3, size = 0.01) +
#   facet_wrap(~ Sex_factor)
```

```{r}

# another bad graph
# my_graph <- ggplot(factor_data |> 
#                      drop_na(BMI, Diabetes_factor),
#                    aes(x = Diabetes_factor, y = BMI, fill = Diabetes_factor)) 
# my_graph + geom_boxplot()
```

```{r}
#creating a new dataset with ONLY the numeric data so that I can pivot it and create a new graph with it
numeric_data <- factor_data[,c(5,16,17,23)]
```

```{r}
long_numeric_data <- data.frame(pivot_longer(numeric_data, c(1:3)))
is.data.frame(long_numeric_data)
```

```{r}
ggplot(data = long_numeric_data,aes(x = Diabetes_factor, y = value, fill = Diabetes_factor))+ #change the second diabetes factor to sex factor if i want to add another variable for sex
  geom_boxplot() +  
  #geom_jitter(width = 0.2, alpha = 0.3, size = 0.01) +
  facet_wrap(~ name,scales = "free_y")

#for binary variables, do the same process of subsetting and pivoting data, then use geom_histogram() plot from above and add the same facet_wrap line from this plot to the end. Also change binwidth argument in geom_histogram to 1.
```

```{r}

# ANOTHER BAD GRAPH
# my_graph2 <- ggplot(factor_data |> 
#                      drop_na(MentHlth, PhysHlth),
#                    aes(x = BMI, y = MentHlth, fill = PhysHlth)) 
# 
# my_graph2 + geom_point(size = 0.5) +      
#   geom_smooth(method = lm)
```

## Summarizations

Now we are going to find some summary statistics, which are helpful for....

```{r}
# checking to see which ages are actually used in the data (14 is not used, so no need to include it in factor transformation)
table(diabetes_data$Age)
```

```{r}
# producing summary statistics
#imp_factor_variables <- factor_data[,c(23, )] |>
  

yes_no_data <- factor_data[,c(23:35, 37)]
yes_no_data
```

```{r}
long_yes_no_data <- data.frame(pivot_longer(yes_no_data, c(2:14)))
is.data.frame(long_yes_no_data)
long_yes_no_data
```

```{r}
(summary_data <- long_yes_no_data[,] |>
   
  group_by(Diabetes_factor, value, name) |>
  summarise(count = n()) |>
   group_by(name) |>
  mutate(percentage = count/sum(count)*100) |>
   mutate(Diabetes_predictor = paste0(Diabetes_factor, "_",value), predictor = name))
```

```{r}
#| fig-width: 20
#| fig-height: 7

#fill = "light blue", color = "black"
(summary_yesno_barplot <- ggplot(summary_data, aes(x = predictor, y = percentage, fill = Diabetes_predictor)) +
  geom_bar(stat = "Identity", aes(color = value, fill = Diabetes_factor), linewidth = 2, position = "dodge")) +
  scale_fill_manual(values = c("lightgray", "darkgray"), name= "Diabetes Outcome") +
  scale_color_manual(values = c("white", "black"), name= "Predictor Outcome")
  
  



```

```{r}

# Numeric summary - can I add to it? 
factor_data |>
  group_by(Diabetes_factor) |>
  dplyr::summarize(
    mean_BMI = mean(BMI),
    sd_BMI = sd(BMI),
    mean_PhysHlth = mean(PhysHlth),
    sd_PhysHlth = sd(PhysHlth),
    mean_MentHlth = mean(MentHlth),
    sd_MentHlth = sd(MentHlth)
  )


```

Now let's visualize some of the summary statistics with a few plots.

This first plot is exploring... and ... variables and this is meaningful because... The plot shows that the relationship....

This second plot is exploring... and ... variables and this is meaningful because... The plot shows that the relationship....

```{r}
# plot 2

```

This third plot is exploring... and ... variables and this is meaningful because... The plot shows that the relationship....

```{r}
# plot 3
```

`[Click here for the Modeling Page](Modeling.html)`

```{r}

# when modeling, put parameters as smaller, and one predictor, small cv, should make it faster, check to make sure its working, no more than 5 minutes. always test it with a simple model to see if it works because the bigger model 

```
