---
title: "Exploratory Data Analysis - ST558 FINAL PROJECT"
author: "Kyra Kapsaskis"
format: html
editor: visual
---

## Introduction to the Data

For this project, we will be looking at diabetes data that includes various risk factors and health-related variables that we can assess for their influence on whether or not a person has diabetes.

The purpose of our EDA is to find the best predictors for whether or not someone has diabetes. We want to fit the models because this is the best way to test different predictors but also different relationships to the response variable. A variety of models can be compared and assessed on different metrics to find the strongest relationships.

```{r}
# load in the necessary packages

library(caret)
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(Hmisc)
library(randomForest)
```

#### Read in the Diabetes data from the Diabetes Health Indicators Dataset

Reading about the data at https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset/ we can get some info on the variables.

Our response variable will be the Diabetes_binary variable.

```{r}
# check what directory we are using
getwd()
```

```{r}
# set the directory
setwd("/Users/kyrakapsaskis/ST558_Final_Project_Folder/ST558-Final-Project")
# this would be followed by read.csv with the file name instead of path
```

```{r}
# read in the data using a relative path

diabetes_data <- read.csv("/Users/kyrakapsaskis/ST558_Final_Project_Folder/ST558-Final-Project/diabetes_binary_health_indicators_BRFSS2015.csv")

```

Let's preview the data to make sure it's been read in properly

```{r}
diabetes_data

```

## The data looks good! Now let's move forward!

## What types of data do we have? What do we want?

#### Numeric variables

The numeric variables are BMI, physical health, and mental health, and these can be kept the same for the models that we will create.

#### Categorical variables

The categorical variables are age, general health, education, income, sex (binary, but not a yes/no binary), but they are being represented by numbers, so we must convert them to factors with labels so they are more interpretable. In order to know how to relabel them, we must look them up in the [CODEBOOK](https://www.cdc.gov/brfss/annual_data/2015/pdf/codebook15_llcp.pdf) and read about how they're coded.

-   Age is `_AGEG5YR` in the codebook

-   General Health is `GENHLTH` in the codebook

-   Education is `EDUCA` in the codebook

-   Income is `INCOME2` in the codebook

-   Sex is `SEX` in the codebook

-   The codebook can be found [here](https://www.cdc.gov/brfss/annual_data/2015/pdf/codebook15_llcp.pdf).

### Binary variables - all the rest

These are also categorical variables but they all follow the No/Yes pattern with 0's and 1's so it will be easier to change them all to factors.

```{r}
describe(diabetes_data$GenHlth)
```

```{r}
# convert the variables to factors with meaningful level names
# 0 is female, 1 is male

factor_data <- diabetes_data %>%
  mutate( 
    Diabetes_factor = factor(Diabetes_binary, levels = c(0, 1), labels = c("No", "Yes")),
    HighBP_factor = factor(HighBP, levels = c(0, 1), labels = c("No", "Yes")),
    HighChol_factor = factor(HighChol, levels = c(0, 1), labels = c("No", "Yes")),
    CholCheck_factor = factor(CholCheck, levels = c(0, 1), labels = c("No", "Yes")),
    Smoker_factor = factor(Smoker, levels = c(0, 1), labels = c("No", "Yes")),
    Stroke_factor = factor(Stroke, levels = c(0, 1), labels = c("No", "Yes")),
    HeartDiseaseorAttack_factor = factor(HeartDiseaseorAttack, levels = c(0, 1), labels = c("No", "Yes")),
    PhysActivity_factor = factor(PhysActivity, levels = c(0, 1), labels = c("No", "Yes")),
    Fruits_factor = factor(Fruits, levels = c(0, 1), labels = c("No", "Yes")),
    Veggies_factor = factor(Veggies, levels = c(0, 1), labels = c("No", "Yes")),
    HvyAlcoholConsump_factor = factor(HvyAlcoholConsump, levels = c(0, 1), labels = c("No", "Yes")),
    AnyHealthcare_factor = factor(AnyHealthcare, levels = c(0, 1), labels = c("No", "Yes")),
    NoDocbcCost_factor = factor(NoDocbcCost, levels = c(0, 1), labels = c("No", "Yes")),
    GenHlth_factor = factor(GenHlth, levels = c(1:5), labels = c("Excellent", "Very good", "Good", "Fair", "Poor")),
    Diffwalk_factor = factor(DiffWalk, levels = c(0, 1), labels = c("No", "Yes")),
    Sex_factor = factor(Sex, levels = c(0, 1), labels = c("Female", "Male")),
    # non-binary
    Age_factor = factor(Age, levels = c(1:13), labels = c("18-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80 or older")),
    Education_factor = factor(Education, levels = c(1:6), labels = c("No school", "Elementary", "Some high school", "High school graduate", "Some college or technical school", "College graduate")),
    Income_factor = factor(Income, levels = c(1:8), labels = c("<$10k", "$10k-$15k", "$15k-$20k", "$20k-$25k", "$25k-$35k", "$35k-$50k", "$50k-$75k", "$75k<="))
  )


```

We need to check for missing data so that if there is missing data, we can give R instructions for how to handle it as we are fitting our models and running analyses.

```{r}
# checking for missing data. Other methods are to use str(data), summary(data), or describe(data).

sum(is.na(factor_data))

```

#### Hooray, no missing data!!

```{r}
twoway_table1_Sex <- table(factor_data[, c("Diabetes_factor", "Sex_factor")])
twoway_table2_Age <- table(factor_data[, c("Diabetes_factor", "Age_factor")])
twoway_table3_HighChol <- table(factor_data[, c("Diabetes_factor", "HighChol_factor")])
twoway_table4_PhysActivity <- table(factor_data[, c("Diabetes_factor", "PhysActivity_factor")])
twoway_table5_GenHlth <- table(factor_data[, c("Diabetes_factor", "GenHlth_factor")])
```

Here are some contingency tables so we can start to see some of the differences in the variables

```{r}
twoway_table1_Sex
twoway_table2_Age
twoway_table3_HighChol
twoway_table4_PhysActivity
twoway_table5_GenHlth
```

This histogram of the 'Not Good' Physical Health Days shows us the distribution, and that it was most common for people to say that they had zero days of being in poor health during the last month

```{r}
physhlth_plot <- ggplot(factor_data, aes(x = PhysHlth)) +
  geom_histogram(binwidth = 2, fill = "light blue", color = "black") +
  labs(title = "Distribution of 'Not Good' Physical Health Days", x = "Now thinking about your physical health,\n which includes physical illness and injury, for how many days during \n the past 30 days was your physical health not good?", y = "Frequency")
physhlth_plot
```

The histogram above looks ver similar to the one below, on poor mental health days. It is hard to say whether this is a psychometric issue, where people tend to answer these questions in similar ways, and the question could be asked better, or that these two items are correlated with each other.

```{r}
menthlth_plot <- ggplot(factor_data, aes(x = MentHlth)) +
  geom_histogram(binwidth = 2, fill = "light blue", color = "black") +
  labs(title = "Distribution of 'Not Good' Mental Health Days", x = "Now thinking about your mental health, \n which includes stress, depression, and problems with emotions, \n for how many days during the past 30 days \n was your mental health not good?", y = "Frequency")
menthlth_plot
```

In this histogram below, we can see that BMI follows a standard normal curve in this sample. This is helpful to know because if BMI comes out as being a very strong predictor of diabetes, we want to be certain that we have a standard distribution of BMI that is represented in our sample, so that it will best represent the population.

```{r}
bmi_plot <- ggplot(factor_data, aes(x = BMI)) +
  geom_histogram(binwidth = 2, fill = "light blue", color = "black") +
  labs(title = "Distribution of BMI", x = "BMI", y = "Frequency")
bmi_plot
```

In order to visualize our numeric data, we first need to perform some further pre-processing on it. The first step is to create a new dataset with just the numeric variables.

```{r}
#creating a new dataset with ONLY the numeric data so that I can pivot it and create a new graph with it
numeric_data <- factor_data[,c(5,16,17,23)]
```

Now, we want to convert it to long format so we can represent it in a plot in a way that is easiest to understand it.

```{r}
long_numeric_data <- data.frame(pivot_longer(numeric_data, c(1:3)))
is.data.frame(long_numeric_data)
```

A boxplot is helpful for our numeric data because we can use colors to show whether or not the person has diabetes. This plot shows the outliers as dots. Notably, there is a much wider spread of data for people being in poor physical health and having diabetes, than for mental health. The group without diabetes reported much fewer days of being in poor physical health. This is interesting to think about, because we know that physical health can be related to developing diabetes, but also that people with type diabetes might just see themselves as being in poorer physical health. Also, this is good to note as being a predictor to explore more.

The average for BMI is higher in the people with diabetes than those without, which is also expected, and something to note as a good thing to find, demonstrating that our sample shows some expected results.

```{r}
ggplot(data = long_numeric_data,aes(x = Diabetes_factor, y = value, fill = Diabetes_factor))+ #change the second diabetes factor to sex factor if i want to add another variable for sex
  geom_boxplot() +  
  #geom_jitter(width = 0.2, alpha = 0.3, size = 0.01) +
  facet_wrap(~ name,scales = "free_y")

```

## Summaries

Now we are going to create some more summaries to further explore our data, specifically our factor/binary data. As we did before, we must first create a new dataset.

```{r}
yes_no_data <- factor_data[,c(23:35, 37)]
yes_no_data
```

We are once again pivoting to longer format so that we can create a graph.

```{r}
long_yes_no_data <- data.frame(pivot_longer(yes_no_data, c(2:14)))
is.data.frame(long_yes_no_data)
long_yes_no_data
```

As part of our pre-processing, we want to combine some of the columns and add new column names that are more descriptive, so we can target what we are really trying to see, which is our response and predictor side by side. Now we can see the data separated into Yes/No for the risk factors combined with Yes/No for having diabetes. We can see the percentages, which is very helpful for understanding what experiences are seen the most often.

```{r}
(summary_data <- long_yes_no_data[,] |>
   
  group_by(Diabetes_factor, value, name) |>
  summarise(count = n()) |>
   group_by(name) |>
  mutate(percentage = count/sum(count)*100) |>
   mutate(Diabetes_predictor = paste0(Diabetes_factor, "_",value), predictor = name))
```

This bar graph is really cool because it shows our yes/no binary variables as groups of 4. Each bar is a combination of having the predictor (the outline around the bar) and having diabetes or not (the coloring of the bar). The height of the bar is the percentage. The first bar in each cluster is not having the predictor value and not having diabetes. Followed by no predictor and yes diabetes, yes predictor and no diabetes, and yes predictor and yes diabetes.

Notably, the predictors that were commonly associated with not having diabetes are the same ones that we would consider healthy, like eating vegetables and being physically active.

```{r}
#| fig-width: 20
#| fig-height: 7

#fill = "light blue", color = "black"
(summary_yesno_barplot <- ggplot(summary_data, aes(x = predictor, y = percentage, fill = Diabetes_predictor)) +
  geom_bar(stat = "Identity", aes(color = value, fill = Diabetes_factor), linewidth = 2, position = "dodge")) +
  scale_fill_manual(values = c("lightgray", "darkgray"), name= "Diabetes Outcome") +
  scale_color_manual(values = c("white", "black"), name= "Predictor Outcome")

```

For good measure, let's take another look at the numeric variables and create a tibble with means and standard deviations. We can see the higher mean of BMI again as well as the standard deviations for Physical and Mental health, which are interesting. The data is more spread out for both of these predictors in the 'having diabetes' group. This could have to do with the unbalanced data and not having many people with diabetes, but it could also be because you see a higher representation of poor mental and physical health days with people who have diabetes.

```{r}

# Numeric summary
factor_data |>
  group_by(Diabetes_factor) |>
  dplyr::summarize(
    mean_BMI = mean(BMI),
    sd_BMI = sd(BMI),
    mean_PhysHlth = mean(PhysHlth),
    sd_PhysHlth = sd(PhysHlth),
    mean_MentHlth = mean(MentHlth),
    sd_MentHlth = sd(MentHlth)
  )


```

## Now let's look at some models!

`[Click here for the Modeling Page](Modeling.html)`
